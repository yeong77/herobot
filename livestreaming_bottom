#!/usr/bin/env python3
import models_bottom
import torch
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
#from dataset import ImageDataset
from torch.utils.data import DataLoader
from imutils.video import VideoStream
from imutils.video import FPS
import cv2
import argparse
import sys
import rospy
from herobot.msg import String
from std_msgs.msg import UInt8
import time


device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
model = models_bottom.model(pretrained=False, requires_grad=False).to(device)

checkpoint = torch.load("/root/catkin_ws/src/herobot/src/multilabel/outputs/bottom.pth")
model.load_state_dict(checkpoint['model_state_dict'])
model.eval()

train_csv = pd.read_csv('/root/catkin_ws/src/herobot/src/multilabel/bottom/bottom.csv')
genres = train_csv.columns.values[2:]

vs = VideoStream(src=0).start()

#time.sleep(2.0)
fps = FPS().start()

class multilabel():
    def __init__(self):
        self.sub_height = rospy.Subscriber('chatter', String, self.receive_clothes, queue_size= 20)
        self.pub_detect = rospy.Publisher('clothes_detect', UInt8, queue_size=1)
        self.pub_tsp = rospy.Publisher('/stop/tsp', String, queue_size=1)
        self.find_clothes_infor1 = " "
        self.find_clothes_infor2 = " "
        self.find_list1 = " "
        self.find_list2 = " "
        self.count = 0
        self.old_time = time.time()
        self.new_time = 0
        self.time_interval = 0
        while not rospy.is_shutdown():
            self.livestream()
    
    def receive_clothes(self, msg_infor):
        self.find_clothes_infor1 = msg_infor.color2
        self.find_clothes_infor2 = msg_infor.type2
        
        self.find_list1 = self.find_clothes_infor1 + "    " + self.find_clothes_infor2 + "    "
        self.find_list2 = self.find_clothes_infor2 + "    " + self.find_clothes_infor1 + "    "


    def livestream(self):
        msg_detect_clothes = UInt8()
        tsp_stop = String()
        while True:
            frame = vs.read()
            image = frame
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            frame = frame.transpose((2, 0, 1))
            frame = np.expand_dims(frame, axis=0)
            frame = frame / 255.0
            frame = torch.FloatTensor(frame)
            frame = frame.to(device)
            outputs = model(frame)
            outputs = torch.sigmoid(outputs[0])
            outputs = outputs.detach().cpu()
            sorted_indices = np.argsort(outputs)
            best = sorted_indices[-2:]
            string_predicted = ''
            for i in range(len(best)):
                string_predicted += f"{genres[best[i]]}    "
            cv2.putText(image, string_predicted, (100, 100), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2, cv2.LINE_AA)
            cv2.imshow("Frame", image)

            if string_predicted == self.find_list1 or string_predicted == self.find_list2:
                self.count +=1
            else:
                pass

            self.new_time = time.time()
            self.time_interval = self.new_time - self.old_time

            if self.count == 8 and self.time_interval < 15:
                msg_detect_clothes.data = 4
                tsp_stop.tsp = 'stop'
                print("detect!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                self.pub_detect.publish(msg_detect_clothes)
                self.pub_tsp.publish(tsp_stop)
                exit()

            elif self.count != 5 and self.time_interval > 15:
                msg_detect_clothes.data = 1
                print("not detect!!!!!!!!!!!!!!")
                self.pub_detect.publish(msg_detect_clothes)
                exit()

            else:
                pass
                
            key = cv2.waitKey(1) & 0xFF
            # if the 'q' key was pressed, break from the loop
            if key == ord("q"):
                break
            # update the FPS counter
            fps.update()

        fps.stop()
        print("[INFO] elapsed time: {:.2f}".format(fps.elapsed()))
        print("[INFO] approx. FPS: {:.2f}".format(fps.fps()))
        # do a bit of cleanup
        cv2.destroyAllWindows()
        vs.stop()

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('livestreaming_bottom')
    node = multilabel()
    node.main()
